// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
  
}

model Companies {
  id                Int                 @id @default(autoincrement())
  nome              String    
  cnpj              String              @unique 
  CEP               String              
  coordenadas       String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt


  dono User         @relation(fields: [donoId], references: [id])
  donoId            Int

  endereco Enderecos? @relation(fields: [enderecoId], references: [id])
  enderecoId             Int?
  
  
  PointsCollection PointsCollection[]

  @@map("companies")

  
 
}

model PointsCollection {
  id                    Int      @id @default(autoincrement())
  nome                  String   
  CEP                   String   
  horario_funcionamento String   
  dias_funcionamento    String   
  telefone              String?  
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  coordenadas           String
  
  empresa Companies     @relation(fields: [empresaId], references: [id])
  empresaId             Int

  
  endereco Enderecos? @relation(fields: [enderecoId], references: [id])
  enderecoId             Int?
  



  @@map("points_collection")
}


model User {

  id                    Int @id @default(autoincrement())
  nome                  String
  email                 String @unique 
  senha_hash            String
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  companies Companies[]
  @@map("users")
}

model Enderecos {
  id                    Int      @id @default(autoincrement()) // ID automático como chave primária
  cep                   String   // CEP (não nulo)
  uf                    String   // UF (não nulo)
  cidade                String   // Cidade (não nulo)
  complemento           String?  // Complemento (pode ser nulo)
  numero                String   // Número (não nulo)
  endereco              String   // Endereço (não nulo)
  bairro                String   // Bairro (não nulo)
  created_at            DateTime @default(now()) // Criado em (padrão: timestamp atual)
  updated_at            DateTime @updatedAt // Atualizado em (atualiza automaticamente com timestamp atual)

  

  

  @@map("Enderecos") // Mapeia para a tabela "Enderecos"
  
  Companies Companies[]
  PointsCollection PointsCollection[]
}

